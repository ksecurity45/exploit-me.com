<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Exploit-me.com - CheatSheet</title>
    <link>/cheatsheet/tags/web/</link>
    <description>Recent content in Web on Exploit-me.com - CheatSheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2022 19:06:50 +0200</lastBuildDate><atom:link href="/cheatsheet/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server-side Template Injection - Discovery and Exploitation</title>
      <link>/cheatsheet/blog/ssti-discovery-and-exploitation/</link>
      <pubDate>Mon, 18 Apr 2022 19:06:50 +0200</pubDate>
      
      <guid>/cheatsheet/blog/ssti-discovery-and-exploitation/</guid>
      <description>Server-side Template Injection Server-side Template Injection (SSTI) is becoming a more common vulnerability in web applications as more developers move to use templating engines. when developers misuse a templating engine, they can introduce vulnerabilities that range from XSS to remote code execution.
Discovery Our first step is to determine which templating engine the target is using.
We can use following payload to test for SSTI manualy.
{{7*7}} ${7*7} &amp;lt;%= 7*7 %&amp;gt; ${{7*7}} #{7*7} @(1+2) ${7*&amp;#39;7&amp;#39;} {{ this }} Payload to test for SSTI using burp intruder.</description>
    </item>
    
  </channel>
</rss>
